{"version":3,"sources":["../src/components/countProc.js","../src/components/drawChart.js","../src/components/createDataList.js","../src/components/showOnPage.js","../src/main.js"],"names":["countPercent","num","toFixed","drawChart","confirmed","recovered","sick","recoveredChart","deathsChart","sickChart","data","google","visualization","arrayToDataTable","PieChart","document","getElementById","draw","createDataList","name","element","template","querySelector","innerHTML","showOnPage","obj","deaths","dataUpdate","hasOwnProperty","city","country","showError","message","errorMessage","style","color","formCountry","forms","dataObj","localStorage","getItem","JSON","parse","charts","load","setOnLoadCallback","fetch","then","response","json","countries","forEach","catch","elements","addEventListener","e","target","value","map","item","provinceState","sort","index","array","length","preventDefault","inputElemCountry","inputElemCity","placeholder","lastUpdate","update","slice","cityInfo","find","reduce","total","tRecovered","tConfirmed","tDeaths","sickNum","setItem","stringify","clear","objectToReset"],"mappings":"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","file":"main.dc93270d.js","sourceRoot":"../public","sourcesContent":["function countPercent(num) {\n    return +((num * 100).toFixed(2));\n};\n\nexport default countPercent;","import countPercent from './countProc.js';\n\nfunction drawChart(confirmed = 100, recovered = 60, sick = 30, deaths = 10) {\n    let recoveredChart = recovered / confirmed;\n    let deathsChart = deaths / confirmed;\n    let sickChart = sick / confirmed;\n\n    var data = google.visualization.arrayToDataTable([\n    ['Label', 'Percentage'],\n    [`recovered: ${countPercent(recoveredChart)}%`, recoveredChart],\n    [`sick: ${countPercent(sickChart)}%`, sickChart],\n    [`deaths: ${countPercent(deathsChart)}%`, deathsChart]\n  ]);\n  \n    // Optional; add a title and set the width and height of the chart\n    // var options = {'width':400, 'height':150};\n  \n    // Display the chart inside the <div> element with id=\"piechart\"\n    var chart = new google.visualization.PieChart(document.getElementById('piechart'));\n    chart.draw(data);\n  }\n\n  export default drawChart;","function createDataList(name, element) {\n    let template = `<option value=\"${name}\">${name}</option>`;\n    document.querySelector(element).innerHTML += template;\n};\n\nexport default createDataList;\n\n","function showOnPage(obj) {\n    let recovered = document.querySelector('.recovered');\n    let confirmed = document.querySelector('.confirmed');\n    let deaths = document.querySelector('.deaths');\n    let sick = document.querySelector('.sick');\n    let dataUpdate = document.querySelector('.date > span');\n    let heading = document.querySelector('.header > h1 > span');\n\n    heading.innerHTML = obj.hasOwnProperty('city') ? obj.city : obj.country\n    dataUpdate.innerHTML = obj.dataUpdate;\n    recovered.innerHTML = obj.recovered;\n    confirmed.innerHTML = obj.confirmed;\n    deaths.innerHTML = obj.deaths;\n    sick.innerHTML = obj.sick;\n}\n\nfunction showError(message) {\n    let errorMessage = document.querySelector('.error-message > span');\n    errorMessage.style.color = 'red';\n    errorMessage.innerHTML = message;\n\n}\nexport { showOnPage, showError };","import './sass/style.scss';\nimport drawChart from './components/drawChart.js';\nimport createDataList from './components/createDataList.js';\nimport { showOnPage, showError} from './components/showOnPage.js';\n\nlet formCountry = document.forms.country;\n\nlet dataObj = localStorage.getItem('data') ? JSON.parse(localStorage.getItem('data')) : {\n  country: 'Country',\n  confirmed: 0,\n  recovered: 0,\n  sick: 0,\n  deaths: 0,\n  dataUpdate: ''\n};\n\nshowOnPage(dataObj);\n\n// Load google charts\ngoogle.charts.load('current', {'packages':['corechart']});\ngoogle.charts.setOnLoadCallback(drawChart);\n\n// LIST of Countries\nfetch('https://covid19.mathdro.id/api/countries')\n  .then(response => response.json())\n  .then(data => {\n    data.countries.forEach(country => {\n      createDataList(country.name, 'datalist#countriesList');\n    });\n  })\n  .catch(() => showError('Problem with finding country'));\n\n// LIST of cities/regions\nformCountry.elements[0].addEventListener('change', (e) => {\n  let country = e.target.value;\n\n  fetch(`https://covid19.mathdro.id/api/countries/${country}/confirmed`)\n    .then(response => response.json())\n    .then(data => {\n      let citySorted = data.map(item => item.provinceState).sort();\n      citySorted.forEach((item, index, array) => {\n        if(array.length >= 2) createDataList(item, 'datalist#citiesList');\n      });\n    })\n  .catch(() => showError('Problem with finding a city / region'));\n})\n\n//ON SUBMIT\nformCountry.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  // access to input values\n  let inputElemCountry = e.target.elements[0];\n  let country = inputElemCountry.value;\n\n  let inputElemCity = e.target.elements[1];\n  let city = inputElemCity.value;\n\n  // RESET\n  document.querySelector('datalist#citiesList').innerHTML = ' '; \n  inputElemCountry.value = '';\n  inputElemCountry.placeholder = 'Country*';\n\n  inputElemCity.value = '';\n  inputElemCity.placeholder = 'City';\n\n  //Store LAST UPDATE in object\n  fetch(`https://covid19.mathdro.id/api/countries/${country}`)\n  .then(response => response.json())\n  .then(country => country.lastUpdate)\n  .then(update => dataObj.dataUpdate = `${update.slice(0, 10)} at ${update.slice(11, 16)}`)\n  .catch(() => showError('This country does not exist'));\n\n  // MAIN STATISTICS\n  fetch(`https://covid19.mathdro.id/api/countries/${country}/confirmed`)\n  .then(response => response.json())\n  .then(data => {\n    // receive needed data if city provided\n    if(city && data[0].provinceState) {\n      // Update object\n      dataObj.country = country;\n      dataObj.city = city;\n\n      // Get data\n      let cityInfo = data.find(item => item.provinceState === city);\n      return [cityInfo.recovered, cityInfo.confirmed, cityInfo.deaths];\n    \n    } else { \n      // receive needed data if only country provided\n      // Update object\n      dataObj.country = country;\n      if(dataObj.city) delete dataObj.city;\n\n      // Get and count data\n      let totalRecovered = data.reduce((total, { recovered }) => total + recovered, 0);\n      let totalConfirmed = data.reduce((total, { confirmed }) => total + confirmed, 0);\n      let totalDeaths = data.reduce((total, { deaths }) => total + deaths, 0);\n      \n      return [totalRecovered, totalConfirmed, totalDeaths];\n    };    \n  })\n  .then(([tRecovered, tConfirmed, tDeaths]) => { // process the chosen data\n    // count active cases\n    let sickNum = tConfirmed - (tRecovered + tDeaths);\n\n    // update object\n    dataObj.recovered = tRecovered;\n    dataObj.confirmed = tConfirmed;\n    dataObj.deaths = tDeaths;\n    dataObj.sick = sickNum;\n\n    return dataObj;\n  })\n  .then(obj => {\n    // show data on the page\n    drawChart(dataObj.confirmed, dataObj.recovered, dataObj.sick, dataObj.deaths);\n    showOnPage(obj);\n\n    localStorage.setItem(\"data\", JSON.stringify(dataObj));\n  })\n  .catch(() => showError('Problem with getting data'));\n});\n\n// clear localStorage\ndocument.querySelector('button.clear').addEventListener('click', () => {\n  localStorage.clear();\n\n  let objectToReset = {\n    country: 'Country',\n    confirmed: 0,\n    recovered: 0,\n    sick: 0,\n    deaths: 0,\n    dataUpdate: ''\n  };\n  showOnPage(objectToReset);\n})"]}